             (x-self.position[0])^2 + (line_k*x + line_m - self.position[1])^2 = self.radius
        
        (line_k*x + line_m - self.position[1])^2
        
        line_k^2*x^2 + line_m^2     + 
        2 line_k*line_m*x 
        -2*self.position[1]*line_k - 
        2*line_m*self.position[1]
        
        
        (1+k^2)x^2 + (-2*self.position[0] - 2*self.position[1]*line_k + 2*line_k*line_m)x + (self.position[0]**2 + line_m**2 + self.position[1]**2 - 2*line_m*self.position[1] - self.radius)

def semislice():
    point_array = generate_circle_points(OUTER_RADIUS, STARTING_CIRCLE_NUM_POINTS)
    angle_list = [2*np.pi*iteration/STARTING_CIRCLE_NUM_POINTS for iteration in range(STARTING_CIRCLE_NUM_POINTS)]
    iterations = 1
    area_removed = 0
    
    
    # First Cut
    current_cut_radius = OUTER_RADIUS - CUT_THICKNESS
    new_points = check_all_point_intersections(point_array, vertical_x=current_cut_radius)

    point_remove_len = dict()
    point_len = len(point_array)
    point_array, angle_list = remove_outside_points(point_array, angle_list, new_points)
    add_dict(point_remove_len, point_len - len(point_array))

    point_array, angle_list = insert_points(point_array, angle_list, new_points)
    
    area_removed += triangle_area([OUTER_RADIUS, 0], new_points[0], new_points[1])
    print([OUTER_RADIUS, 0])
    print(new_points)
    print(area_removed)
    
    current_point = find_next_cut_point(new_points)
    old_current_point = [OUTER_RADIUS, 0]
    
    #plot_points(point_array, current_point, new_points)
    #plt.figure(1)
    #print()
    
    while current_cut_radius > INNER_RADIUS:
        
        if abs(current_point[1]) < SMALL_THRESHOLD:
            vertical_x = reduce_magnitude(current_point[0], CUT_THICKNESS)
            new_points = check_all_point_intersections(point_array, vertical_x=vertical_x)

            point_len = len(point_array)
            point_array, angle_list = remove_outside_points(point_array, angle_list, new_points)
            add_dict(point_remove_len, point_len - len(point_array))
            
        else:
            if current_point[0] == 0:
                line_k = 0
                line_m = reduce_magnitude(current_point[1], CUT_THICKNESS)
            else:
                angle_k = current_point[1]/current_point[0]
                current_theta = get_angle(current_point)
                
                line_k = -1 / angle_k
                line_m = current_point[1] - line_k*current_point[0]
                #print("Line:", round(line_k, 2), round(line_m, 2))

            new_points = check_all_point_intersections(point_array, line_k, line_m)
            #print("Intersection Points: ", new_points)

            point_len = len(point_array)
            point_array, angle_list = remove_outside_points(point_array, angle_list, new_points)
            add_dict(point_remove_len, point_len - len(point_array))

        point_array, angle_list= insert_points(point_array, angle_list, new_points)
        current_point = find_next_cut_point(new_points)

    

        
        ### CALCULATING REMOVED AREA ###
        
        old_current_angle = get_angle(old_current_point)
        area_removed += triangle_area([
        old_current_point[0] + (CUT_THICKNESS*np.cos(old_current_angle)), 
        old_current_point[1] + (CUT_THICKNESS*np.sin(old_current_angle))
        ], new_points[0], new_points[1])
        current_cut_radius = np.linalg.norm(current_point)
        
        
        ### DEBUGGING ###
        
        #print(current_point)
        #print(f"Current point: {current_point} Angle: {round(get_angle(current_point) / np.pi, 2)} pi")
        #print("Point length:", len(point_array))
        #print("Angle length:", len(angle_list))
        #print(f"Current cut number: {iterations} \n")
        
        plot_points(point_array, current_point, new_points)
        print()
        
        iterations += 1
        old_current_point = current_point
        
        if iterations % 500 == 0:
            #plot_points(point_array, current_point, new_points)
            print(iterations, area_removed)
        #     print([
        # old_current_point[0] + (CUT_THICKNESS*np.cos(old_current_point)), 
        # old_current_point[1] + (CUT_THICKNESS*np.sin(old_current_point))
        # ], new_points[0], new_points[1])
        #     print(triangle_area([
        # old_current_point[0] + (CUT_THICKNESS*np.cos(old_current_point)), 
        # old_current_point[1] + (CUT_THICKNESS*np.sin(old_current_point))
        # ], new_points[0], new_points[1]))